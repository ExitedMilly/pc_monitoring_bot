package telegram

import (
	"TG_BOT_GO/internal/functions"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback-–∑–∞–ø—Ä–æ—Å—ã
func HandleUpdate(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.Message != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
		switch update.Message.Command() {
		case "start":
			sendWelcomeMessage(update.Message.Chat.ID, 0, bot) // messageID = 0 –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		case "net":
			functions.HandleNetCommand(update, bot)
		case "processes":
			functions.HandleProcessesCommand(update, bot)
		case "status":
			functions.HandleStatusCommand(update, bot)
		case "alarm":
			functions.HandleAlarmCommand(update, bot)
		case "alarm_on":
			functions.HandleAlarmOnCommand(update, bot)
		case "alarm_off":
			functions.HandleAlarmOffCommand(update, bot)
		case "alarm_set":
			functions.HandleAlarmSetCommand(update, bot)
		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
			bot.Send(msg)
		}
	} else if update.CallbackQuery != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
		handleCallbackQuery(update.CallbackQuery, bot)
	}
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
func handleCallbackQuery(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID
	messageID := callback.Message.MessageID
	data := callback.Data

	switch data {
	case "monitoring":
		sendMonitoringMenu(chatID, messageID, bot)
	case "network_analysis":
		handleNetworkAnalysis(chatID, messageID, bot)
	case "processes":
		handleProcesses(chatID, messageID, bot)
	case "status":
		handleStatus(chatID, messageID, bot)
	case "alarm":
		handleAlarm(chatID, messageID, bot)
	case "enable_alarm":
		handleEnableAlarm(chatID, messageID, bot)
	case "disable_alarm":
		handleDisableAlarm(chatID, messageID, bot)
	case "back":
		sendWelcomeMessage(chatID, messageID, bot) // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	default:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
	}
}

// handleEnableAlarm –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func handleEnableAlarm(chatID int64, messageID int, bot *tgbotapi.BotAPI) {
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /alarm_on
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}
	functions.HandleAlarmOnCommand(update, bot)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã /alarm
	handleAlarm(chatID, messageID, bot)
}

// handleDisableAlarm –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func handleDisableAlarm(chatID int64, messageID int, bot *tgbotapi.BotAPI) {
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /alarm_off
	update := tgbotapi.Update{
		Message: &tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
		},
	}
	functions.HandleAlarmOffCommand(update, bot)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã /alarm
	handleAlarm(chatID, messageID, bot)
}

// sendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
func sendWelcomeMessage(chatID int64, messageID int, bot *tgbotapi.BotAPI) {
	text := `–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º!
–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ, —Ç—ã —Å–º–æ–∂–µ—à—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º, –æ–±–ª–µ–≥—á–∏—Ç—å —Å–µ–±–µ –∂–∏–∑–Ω—å –∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û!
–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.`

	keyboard := GetWelcomeKeyboard()

	// –ï—Å–ª–∏ messageID == 0, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if messageID == 0 {
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = &keyboard
		_, err := bot.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	msg.ReplyMarkup = &keyboard
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// sendMonitoringMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func sendMonitoringMenu(chatID int64, messageID int, bot *tgbotapi.BotAPI) {
	text := `üìä –†–∞–∑–¥–µ–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫, —Ä–∞–±–æ—Ç—É –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –≤–∞—à–µ–≥–æ –ü–ö, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ.`

	keyboard := GetMonitoringKeyboard()

	// –ï—Å–ª–∏ messageID == 0, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if messageID == 0 {
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = &keyboard
		_, err := bot.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	msg.ReplyMarkup = &keyboard
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// handleNetworkAnalysis –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑
func handleNetworkAnalysis(chatID int64, messageID int, bot *tgbotapi.BotAPI) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥"
	msg := tgbotapi.NewEditMessageText(chatID, messageID, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
	bot.Send(msg)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã /net
	output := functions.HandleNetCommandOutput()

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	resultMsg := tgbotapi.NewEditMessageText(chatID, messageID, output)
	keyboard := GetBackKeyboard("monitoring") // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	resultMsg.ReplyMarkup = &keyboard

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
	_, err := bot.Send(resultMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// handleProcesses –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
func handleProcesses(chatID int64, messageID int, bot *tgbotapi.BotAPI) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥"
	msg := tgbotapi.NewEditMessageText(chatID, messageID, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
	bot.Send(msg)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã /processes
	output := functions.HandleProcessesCommandOutput()

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	resultMsg := tgbotapi.NewEditMessageText(chatID, messageID, output)
	keyboard := GetBackKeyboard("monitoring") // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	resultMsg.ReplyMarkup = &keyboard

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
	_, err := bot.Send(resultMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// handleStatus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
func handleStatus(chatID int64, messageID int, bot *tgbotapi.BotAPI) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥"
	msg := tgbotapi.NewEditMessageText(chatID, messageID, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
	bot.Send(msg)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã /status
	output := functions.HandleStatusCommandOutput()

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	resultMsg := tgbotapi.NewEditMessageText(chatID, messageID, output)
	keyboard := GetBackKeyboard("monitoring") // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	resultMsg.ReplyMarkup = &keyboard

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
	_, err := bot.Send(resultMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// handleAlarm –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
func handleAlarm(chatID int64, messageID int, bot *tgbotapi.BotAPI) {
	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã /alarm
	output := functions.HandleAlarmCommandOutput()

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewEditMessageText(chatID, messageID, output)
	keyboard := GetAlarmKeyboard() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
	msg.ReplyMarkup = &keyboard

	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
