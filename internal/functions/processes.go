package functions

import (
	"TG_BOT_GO/internal/monitor"
	"fmt"
	"sort"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/shirou/gopsutil/process"
)

// ProcessInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
type ProcessInfo struct {
	Name       string  // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
	CPUUsage   float64 // –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU (%)
	GPULoad    float64 // –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GPU (%)
	MemoryMB   float64 // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ú–ë)
	DownloadMB float64 // –í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ (–ú–ë)
	UploadMB   float64 // –ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ (–ú–ë)
}

// HandleProcessesCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /processes
func HandleProcessesCommand(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
	waitMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
	sentMsg, _ := bot.Send(waitMsg)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
	processes, err := process.Processes()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
		bot.Send(msg)
		return
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
	var processInfoList []ProcessInfo
	for _, p := range processes {
		name, err := p.Name()
		if err != nil {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è
		}

		cpuPercent, err := p.CPUPercent()
		if err != nil {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU
		}

		memInfo, err := p.MemoryInfo()
		if err != nil || memInfo == nil {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
		}

		gpuLoad := monitor.GetGPUUsageForProcess(p.Pid) // –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GPU
		networkInfo, err := monitor.GetNetworkUsageForProcess(p.Pid)
		if err != nil {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
		}

		processInfo := ProcessInfo{
			Name:       name,
			CPUUsage:   cpuPercent,
			GPULoad:    gpuLoad,
			MemoryMB:   float64(memInfo.RSS) / 1024 / 1024, // RSS –≤ –ú–ë
			DownloadMB: networkInfo.DownloadMB,
			UploadMB:   networkInfo.UploadMB,
		}
		processInfoList = append(processInfoList, processInfo)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
	sort.Slice(processInfoList, func(i, j int) bool {
		return processInfoList[i].CPUUsage > processInfoList[j].CPUUsage
	})

	// –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
	output := "+------------------------------+\n"
	output += "| üñ•Ô∏è –¢–æ–ø-10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:          \n"
	output += "+------------------------------+\n"
	for i, p := range processInfoList {
		if i >= 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è 10 –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
			break
		}
		output += fmt.Sprintf("%d. %s:\n", i+1, p.Name)
		output += fmt.Sprintf("  ‚öôÔ∏è CPU: %.1f%%\n", p.CPUUsage)
		output += fmt.Sprintf("  üéÆ GPU: %.1f%%\n", p.GPULoad)
		output += fmt.Sprintf("  üß† –ü–∞–º—è—Ç—å: %.1f –ú–ë\n", p.MemoryMB)
		output += fmt.Sprintf("  üåê –°–µ—Ç—å: ‚¨áÔ∏è %.1f –ú–ë, ‚¨ÜÔ∏è %.1f –ú–ë\n", p.DownloadMB, p.UploadMB)
		output += "\n" // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
	}
	output += "+------------------------------+"

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
	deleteMsg := tgbotapi.NewDeleteMessage(update.Message.Chat.ID, sentMsg.MessageID)
	bot.Send(deleteMsg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, output)
	bot.Send(msg)
}
