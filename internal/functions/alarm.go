package functions

import (
	"TG_BOT_GO/internal/monitor"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleAlarmCommandOutput –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã /alarm –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
func HandleAlarmCommandOutput() string {
	output := "üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: "
	if monitor.AlarmEnabled {
		output += "–í–∫–ª—é—á–µ–Ω—ã\n"
	} else {
		output += "–í—ã–∫–ª—é—á–µ–Ω—ã\n"
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	thresholdsSet := false
	if monitor.AlarmThresholds.CPUTemp > 0 {
		output += fmt.Sprintf("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: –ø–æ—Ä–æ–≥ %.1f¬∞C\n", monitor.AlarmThresholds.CPUTemp)
		thresholdsSet = true
	}
	if monitor.AlarmThresholds.GPUTemp > 0 {
		output += fmt.Sprintf("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU: –ø–æ—Ä–æ–≥ %.1f¬∞C\n", monitor.AlarmThresholds.GPUTemp)
		thresholdsSet = true
	}
	if monitor.AlarmThresholds.CPUUsage > 0 {
		output += fmt.Sprintf("‚öôÔ∏è –ù–∞–≥—Ä—É–∑–∫–∞ CPU: –ø–æ—Ä–æ–≥ %.1f%%\n", monitor.AlarmThresholds.CPUUsage)
		thresholdsSet = true
	}
	if monitor.AlarmThresholds.GPUUsage > 0 {
		output += fmt.Sprintf("üéÆ –ù–∞–≥—Ä—É–∑–∫–∞ GPU: –ø–æ—Ä–æ–≥ %.1f%%\n", monitor.AlarmThresholds.GPUUsage)
		thresholdsSet = true
	}
	if monitor.AlarmThresholds.MemoryUsage > 0 {
		output += fmt.Sprintf("üß† –ü–∞–º—è—Ç—å: –ø–æ—Ä–æ–≥ %.1f%%\n", monitor.AlarmThresholds.MemoryUsage)
		thresholdsSet = true
	}
	if monitor.AlarmThresholds.NetworkUsage > 0 {
		output += fmt.Sprintf("üåê –°–µ—Ç—å: –ø–æ—Ä–æ–≥ %.1f –ú–ë/—Å\n", monitor.AlarmThresholds.NetworkUsage)
		thresholdsSet = true
	}
	if monitor.AlarmThresholds.DiskUsage > 0 {
		output += fmt.Sprintf("üíΩ –î–∏—Å–∫–∏: –ø–æ—Ä–æ–≥ %.1f%%\n", monitor.AlarmThresholds.DiskUsage)
		thresholdsSet = true
	}

	if !thresholdsSet {
		output += "\n‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alarm_set –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
	}

	return output
}

// HandleAlarmCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /alarm
func HandleAlarmCommand(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	output := HandleAlarmCommandOutput()
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, output)
	bot.Send(msg)
}

// HandleAlarmOnCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /alarm_on
func HandleAlarmOnCommand(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if monitor.AlarmThresholds.CPUTemp == 0 && monitor.AlarmThresholds.GPUTemp == 0 &&
		monitor.AlarmThresholds.CPUUsage == 0 && monitor.AlarmThresholds.GPUUsage == 0 &&
		monitor.AlarmThresholds.MemoryUsage == 0 && monitor.AlarmThresholds.NetworkUsage == 0 &&
		monitor.AlarmThresholds.DiskUsage == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã.")
		bot.Send(msg)
		return
	}

	monitor.AlarmEnabled = true
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
	bot.Send(msg)
}

// HandleAlarmOffCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /alarm_off
func HandleAlarmOffCommand(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	monitor.AlarmEnabled = false
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")
	bot.Send(msg)
}

// HandleAlarmSetCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /alarm_set
func HandleAlarmSetCommand(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	args := strings.Fields(update.Message.CommandArguments())
	if len(args) != 2 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /alarm_set <–ø–∞—Ä–∞–º–µ—Ç—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ>")
		bot.Send(msg)
		return
	}

	param := args[0]
	value, err := strconv.ParseFloat(args[1], 64)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
		bot.Send(msg)
		return
	}

	switch param {
	case "cpu_temp":
		monitor.AlarmThresholds.CPUTemp = value
	case "gpu_tmp":
		monitor.AlarmThresholds.GPUTemp = value
	case "cpu_usage":
		monitor.AlarmThresholds.CPUUsage = value
	case "gpu_usage":
		monitor.AlarmThresholds.GPUUsage = value
	case "memory_usage":
		monitor.AlarmThresholds.MemoryUsage = value
	case "network_usage":
		monitor.AlarmThresholds.NetworkUsage = value
	case "disk_usage":
		monitor.AlarmThresholds.DiskUsage = value
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
		bot.Send(msg)
		return
	}

	if err := monitor.SaveThresholds(); err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("üö® –ü–æ—Ä–æ–≥ –¥–ª—è %s —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %.1f.", param, value))
	bot.Send(msg)
}
