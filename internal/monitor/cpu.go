package monitor

import (
	"fmt"
	"strings"

	"github.com/shirou/gopsutil/cpu"
	"github.com/shirou/gopsutil/host"
)

// GetCPUUsage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
func GetCPUUsage() string {
	percent, err := cpu.Percent(0, false)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ"
	}
	progressBar := getProgressBar(percent[0])

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
	temps, err := host.SensorsTemperatures()
	if err != nil {
		return fmt.Sprintf("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞: %.2f%%\n%s", percent[0], progressBar)
	}

	var tempInfo string
	for _, temp := range temps {
		if temp.SensorKey == "coretemp" || strings.Contains(temp.SensorKey, "CPU") {
			tempInfo += fmt.Sprintf("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\n", temp.Temperature)
		}
	}

	return fmt.Sprintf("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞: %.2f%%\n%s%s", percent[0], progressBar, tempInfo)
}

// getProgressBar –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–æ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
func getProgressBar(percent float64) string {
	const barLength = 10 // –î–ª–∏–Ω–∞ –ø–æ–ª–æ—Å–∫–∏ (10 —Å–∏–º–≤–æ–ª–æ–≤)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	filled := int((percent + 5) / 10) // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–µ—Å—è—Ç–∫–∞
	if filled > barLength {
		filled = barLength
	}

	// –°–æ–∑–¥–∞—ë–º –ø–æ–ª–æ—Å–∫—É
	bar := strings.Repeat("‚ñ†", filled) + strings.Repeat("‚ñ¢", barLength-filled)
	return bar
}
