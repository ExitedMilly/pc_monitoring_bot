package monitor

import (
	"fmt"
	"strings"

	"github.com/shirou/gopsutil/cpu"
	"github.com/shirou/gopsutil/disk"
	"github.com/shirou/gopsutil/host"
	"github.com/shirou/gopsutil/mem"
	"github.com/shirou/gopsutil/net"
)

// GetSystemStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
func GetSystemStatus() string {
	diskInfo := getDiskUsage()
	cpuUsage := getCPUUsage()
	memInfo := getMemoryUsage()
	networkInfo := getNetworkUsage()

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å —Ä–∞–º–∫–∞–º–∏
	output := "+------------------------------+\n"
	output += "| üíΩ –î–∏—Å–∫–∏:                     \n"
	output += "+------------------------------+\n"
	output += diskInfo
	output += "+------------------------------+\n"
	output += "| ‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:                 \n"
	output += "+------------------------------+\n"
	output += cpuUsage + "\n"
	output += "+------------------------------+\n"
	output += "| üß† –ü–∞–º—è—Ç—å:                    \n"
	output += "+------------------------------+\n"
	output += memInfo + "\n"
	output += "+------------------------------+\n"
	output += "| üåê –°–µ—Ç—å:                      \n"
	output += "+------------------------------+\n"
	output += networkInfo + "\n"
	output += "+------------------------------+"

	return output
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –¥–∏—Å–∫–∞—Ö
func getDiskUsage() string {
	partitions, err := disk.Partitions(false)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö"
	}

	var diskInfo string
	for _, partition := range partitions {
		usage, err := disk.Usage(partition.Mountpoint)
		if err != nil {
			continue
		}

		freeGB := float64(usage.Free) / 1024 / 1024 / 1024
		totalGB := float64(usage.Total) / 1024 / 1024 / 1024
		diskInfo += fmt.Sprintf(
			"üìÅ –î–∏—Å–∫ %s: %.1f –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ %.1f –ì–ë (%.1f%%)\n",
			partition.Mountpoint,
			freeGB,
			totalGB,
			100-usage.UsedPercent,
		)
	}

	return diskInfo
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
func getCPUUsage() string {
	percent, err := cpu.Percent(0, false)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ"
	}
	progressBar := getProgressBar(percent[0])

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
	temps, err := host.SensorsTemperatures()
	if err != nil {
		return fmt.Sprintf("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞: %.2f%%\n%s", percent[0], progressBar)
	}

	var tempInfo string
	for _, temp := range temps {
		if strings.Contains(temp.SensorKey, "coretemp") || strings.Contains(temp.SensorKey, "CPU") {
			tempInfo += fmt.Sprintf("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\n", temp.Temperature)
		}
	}

	if tempInfo == "" {
		tempInfo = "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
	}

	return fmt.Sprintf("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞: %.2f%%\n%s%s", percent[0], progressBar, tempInfo)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
func getMemoryUsage() string {
	memInfo, err := mem.VirtualMemory()
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏"
	}

	usedPercent := memInfo.UsedPercent
	progressBar := getProgressBar(usedPercent)
	return fmt.Sprintf(
		"üìä –ó–∞–Ω—è—Ç–æ: %.1f –ì–ë –∏–∑ %.1f –ì–ë (%.2f%%)\n%s",
		float64(memInfo.Used)/1024/1024/1024,
		float64(memInfo.Total)/1024/1024/1024,
		usedPercent,
		progressBar,
	)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
func getNetworkUsage() string {
	io, err := net.IOCounters(true)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏"
	}

	var networkInfo string
	for _, stats := range io {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å –Ω—É–ª–µ–≤—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º
		if stats.BytesRecv == 0 && stats.BytesSent == 0 {
			continue
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
		networkInfo += fmt.Sprintf(
			"üì∂ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å %s:\n  ‚¨áÔ∏è –í—Ö–æ–¥—è—â–∏–π: %.1f –ú–ë\n  ‚¨ÜÔ∏è –ò—Å—Ö–æ–¥—è—â–∏–π: %.1f –ú–ë\n",
			stats.Name,
			float64(stats.BytesRecv)/1024/1024,
			float64(stats.BytesSent)/1024/1024,
		)
	}

	return networkInfo
}

// getProgressBar –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–æ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
func getProgressBar(percent float64) string {
	const barLength = 10 // –î–ª–∏–Ω–∞ –ø–æ–ª–æ—Å–∫–∏ (10 —Å–∏–º–≤–æ–ª–æ–≤)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	filled := int((percent + 5) / 10) // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–µ—Å—è—Ç–∫–∞
	if filled > barLength {
		filled = barLength
	}

	// –°–æ–∑–¥–∞—ë–º –ø–æ–ª–æ—Å–∫—É
	bar := strings.Repeat("‚ñ†", filled) + strings.Repeat("‚ñ¢", barLength-filled)
	return bar
}
