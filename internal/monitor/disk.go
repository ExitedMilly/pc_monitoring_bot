package monitor

import (
	"fmt"

	"github.com/shirou/gopsutil/disk"
)

// GetDiskUsage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
func GetDiskUsage() string {
	partitions, err := disk.Partitions(false)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö"
	}

	var diskInfo string
	for _, partition := range partitions {
		usage, err := disk.Usage(partition.Mountpoint)
		if err != nil {
			continue
		}

		freeGB := float64(usage.Free) / 1024 / 1024 / 1024
		totalGB := float64(usage.Total) / 1024 / 1024 / 1024
		diskInfo += fmt.Sprintf(
			"üìÅ –î–∏—Å–∫ %s: %.1f –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ %.1f –ì–ë (%.1f%%)\n",
			partition.Mountpoint,
			freeGB,
			totalGB,
			100-usage.UsedPercent,
		)
	}

	return diskInfo
}

// GetDiskUsageValue –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–∏—Å–∫–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (float64)
func GetDiskUsageValue() float64 {
	usage, err := disk.Usage("/")
	if err != nil {
		return 0.0
	}
	return usage.UsedPercent
}
