package monitor

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"sort"
	"time"

	"github.com/shirou/gopsutil/net"
	"github.com/shirou/gopsutil/process"
)

// IPInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ IP-–∞–¥—Ä–µ—Å–µ
type IPInfo struct {
	IP       string `json:"ip"`
	City     string `json:"city"`
	Region   string `json:"region"`
	Country  string `json:"country"`
	Org      string `json:"org"` // –ü—Ä–æ–≤–∞–π–¥–µ—Ä
	Timezone string `json:"timezone"`
}

// ProcessTraffic –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
type ProcessTraffic struct {
	Name       string
	DownloadMB float64
	UploadMB   float64
}

// TrafficStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
type TrafficStats struct {
	DownloadMB float64
	UploadMB   float64
}

// GetIPInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–µ–º IP
func GetIPInfo() (IPInfo, error) {
	resp, err := http.Get("https://ipinfo.io")
	if err != nil {
		return IPInfo{}, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return IPInfo{}, err
	}

	var info IPInfo
	err = json.Unmarshal(body, &info)
	if err != nil {
		return IPInfo{}, err
	}

	return info, nil
}

// GetTopProcesses –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-3 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–µ—Ç–∏
func GetTopProcesses() ([]ProcessTraffic, error) {
	processes, err := process.Processes()
	if err != nil {
		return nil, err
	}

	var traffic []ProcessTraffic
	for _, p := range processes {
		name, _ := p.Name()
		conns, _ := net.ConnectionsPid("all", p.Pid)

		var download, upload float64
		for _, conn := range conns {
			if conn.Status == "ESTABLISHED" {
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º BytesRecv –∏ BytesSent –∏–∑ IOCounters
				io, err := net.IOCounters(false)
				if err != nil {
					continue
				}
				download += float64(io[0].BytesRecv) / 1024 / 1024
				upload += float64(io[0].BytesSent) / 1024 / 1024
			}
		}

		traffic = append(traffic, ProcessTraffic{
			Name:       name,
			DownloadMB: download,
			UploadMB:   upload,
		})
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
	sort.Slice(traffic, func(i, j int) bool {
		return traffic[i].DownloadMB > traffic[j].DownloadMB
	})

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3
	if len(traffic) > 3 {
		return traffic[:3], nil
	}
	return traffic, nil
}

// GetNetworkSpeed –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏
func GetNetworkSpeed() (float64, float64, error) {
	io1, err := net.IOCounters(false)
	if err != nil {
		return 0, 0, err
	}

	time.Sleep(1 * time.Second) // –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É

	io2, err := net.IOCounters(false)
	if err != nil {
		return 0, 0, err
	}

	downloadSpeed := float64(io2[0].BytesRecv-io1[0].BytesRecv) / 1024 / 1024
	uploadSpeed := float64(io2[0].BytesSent-io1[0].BytesSent) / 1024 / 1024

	return downloadSpeed, uploadSpeed, nil
}

// GetTrafficLast5Min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
func GetTrafficLast5Min() (TrafficStats, error) {
	io, err := net.IOCounters(false)
	if err != nil {
		return TrafficStats{}, err
	}

	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 5 –º–∏–Ω—É—Ç
	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
	return TrafficStats{
		DownloadMB: float64(io[0].BytesRecv) / 1024 / 1024,
		UploadMB:   float64(io[0].BytesSent) / 1024 / 1024,
	}, nil
}

// GetNetworkUsage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /status
func GetNetworkUsage() string {
	io, err := net.IOCounters(true)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏"
	}

	var networkInfo string
	for _, stats := range io {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å –Ω—É–ª–µ–≤—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º
		if stats.BytesRecv == 0 && stats.BytesSent == 0 {
			continue
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
		networkInfo += fmt.Sprintf(
			"üì∂ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å %s:\n  ‚¨áÔ∏è –í—Ö–æ–¥—è—â–∏–π: %.1f –ú–ë\n  ‚¨ÜÔ∏è –ò—Å—Ö–æ–¥—è—â–∏–π: %.1f –ú–ë\n",
			stats.Name,
			float64(stats.BytesRecv)/1024/1024,
			float64(stats.BytesSent)/1024/1024,
		)
	}

	return networkInfo
}
