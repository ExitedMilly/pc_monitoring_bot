package monitor

import (
	"fmt"
	"os/exec"
	"runtime"
	"strings"
)

// GetGPUUsage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ
func GetGPUUsage() string {
	gpuType := detectGPU()

	switch gpuType {
	case "nvidia":
		usage, temp, err := getNvidiaGPUUsage()
		if err == nil {
			return fmt.Sprintf("üéÆ NVIDIA:\nüîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å GPU: %s%%\n%s\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C", usage, getProgressBar(parseFloat(usage)), temp)
		}
	case "amd":
		usage, temp, err := getAMDGPUUsage()
		if err == nil {
			return fmt.Sprintf("üéÆ AMD:\nüîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å GPU: %s%%\n%s\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C", usage, getProgressBar(parseFloat(usage)), temp)
		}
	case "intel":
		usage, temp, err := getIntelGPUUsage()
		if err == nil {
			return fmt.Sprintf("üéÆ Intel:\nüîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å GPU: %s%%\n%s\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C", usage, getProgressBar(parseFloat(usage)), temp)
		}
	}

	return "üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
}

// detectGPU –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
func detectGPU() string {
	switch runtime.GOOS {
	case "linux":
		return detectGPULinux()
	case "windows":
		return detectGPUWindows()
	case "darwin":
		return detectGPUMacOS()
	default:
		return "unknown"
	}
}

// detectGPULinux –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –Ω–∞ Linux
func detectGPULinux() string {
	out, err := exec.Command("lspci").Output()
	if err != nil {
		return "unknown"
	}
	if strings.Contains(strings.ToLower(string(out)), "nvidia") {
		return "nvidia"
	}
	if strings.Contains(strings.ToLower(string(out)), "amd") {
		return "amd"
	}
	if strings.Contains(strings.ToLower(string(out)), "intel") {
		return "intel"
	}
	return "unknown"
}

// detectGPUWindows –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –Ω–∞ Windows
func detectGPUWindows() string {
	out, err := exec.Command("wmic", "path", "win32_VideoController", "get", "name").Output()
	if err != nil {
		return "unknown"
	}
	if strings.Contains(strings.ToLower(string(out)), "nvidia") {
		return "nvidia"
	}
	if strings.Contains(strings.ToLower(string(out)), "amd") {
		return "amd"
	}
	if strings.Contains(strings.ToLower(string(out)), "intel") {
		return "intel"
	}
	return "unknown"
}

// detectGPUMacOS –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –Ω–∞ macOS
func detectGPUMacOS() string {
	out, err := exec.Command("system_profiler", "SPDisplaysDataType").Output()
	if err != nil {
		return "unknown"
	}
	if strings.Contains(strings.ToLower(string(out)), "nvidia") {
		return "nvidia"
	}
	if strings.Contains(strings.ToLower(string(out)), "amd") {
		return "amd"
	}
	if strings.Contains(strings.ToLower(string(out)), "intel") {
		return "intel"
	}
	return "unknown"
}

// getNvidiaGPUUsage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã NVIDIA
func getNvidiaGPUUsage() (string, float64, error) {
	out, err := exec.Command("nvidia-smi", "--query-gpu=utilization.gpu,temperature.gpu", "--format=csv,noheader,nounits").Output()
	if err != nil {
		return "", 0, err
	}
	data := strings.Split(strings.TrimSpace(string(out)), ", ")
	if len(data) < 2 {
		return "", 0, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
	}
	usage := data[0]
	temp := parseFloat(data[1])
	return usage, temp, nil
}

// getAMDGPUUsage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã AMD
func getAMDGPUUsage() (string, float64, error) {
	out, err := exec.Command("rocm-smi", "--showuse", "--showtemp").Output()
	if err != nil {
		return "", 0, err
	}
	lines := strings.Split(string(out), "\n")
	var usage, temp string
	for _, line := range lines {
		if strings.Contains(line, "GPU use") {
			usage = strings.TrimSpace(strings.Split(line, ":")[1])
		}
		if strings.Contains(line, "Temperature") {
			temp = strings.TrimSpace(strings.Split(line, ":")[1])
		}
	}
	return usage, parseFloat(temp), nil
}

// getIntelGPUUsage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã Intel
func getIntelGPUUsage() (string, float64, error) {
	out, err := exec.Command("intel_gpu_top", "-l", "-o", "-").Output()
	if err != nil {
		return "", 0, err
	}
	lines := strings.Split(string(out), "\n")
	var usage, temp string
	for _, line := range lines {
		if strings.Contains(line, "Render/3D") {
			usage = strings.TrimSpace(strings.Split(line, ":")[1])
		}
		if strings.Contains(line, "Temperature") {
			temp = strings.TrimSpace(strings.Split(line, ":")[1])
		}
	}
	return usage, parseFloat(temp), nil
}

// parseFloat –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
func parseFloat(s string) float64 {
	var f float64
	fmt.Sscanf(s, "%f", &f)
	return f
}
