package monitor

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"time"

	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ThresholdSettings —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type ThresholdSettings struct {
	CPUTemp      float64 `json:"cpu_temp"`      // –ü–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã CPU
	GPUTemp      float64 `json:"gpu_temp"`      // –ü–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã GPU
	CPUUsage     float64 `json:"cpu_usage"`     // –ü–æ—Ä–æ–≥ –Ω–∞–≥—Ä—É–∑–∫–∏ CPU
	GPUUsage     float64 `json:"gpu_usage"`     // –ü–æ—Ä–æ–≥ –Ω–∞–≥—Ä—É–∑–∫–∏ GPU
	MemoryUsage  float64 `json:"memory_usage"`  // –ü–æ—Ä–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
	NetworkUsage float64 `json:"network_usage"` // –ü–æ—Ä–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏
	DiskUsage    float64 `json:"disk_usage"`    // –ü–æ—Ä–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏—Å–∫–æ–≤
}

var (
	thresholdsFile = "alarm_thresholds.json" // –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
)

// LoadThresholds –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
func LoadThresholds() error {
	file, err := os.ReadFile(thresholdsFile)
	if err != nil {
		if os.IsNotExist(err) {
			log.Println("–§–∞–π–ª —Å –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
			return SaveThresholds() // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		}
		return err
	}
	return json.Unmarshal(file, &AlarmThresholds)
}

// SaveThresholds —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
func SaveThresholds() error {
	data, err := json.MarshalIndent(AlarmThresholds, "", "  ")
	if err != nil {
		return err
	}
	log.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: %s", string(data))
	return os.WriteFile(thresholdsFile, data, 0644)
}

// StartAlarmMonitor –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func StartAlarmMonitor(bot *tgbotapi.BotAPI, chatID int64) {
	var lastNotification time.Time // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

	for {
		if !AlarmEnabled {
			time.Sleep(10 * time.Second)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if time.Since(lastNotification) < time.Duration(AlarmInterval)*time.Minute {
			time.Sleep(10 * time.Second)
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
		cpuTemp := GetCPUTempValue()       // float64
		gpuTemp := GetGPUTempValue()       // float64
		cpuUsage := GetCPUUsageValue()     // float64
		gpuUsage := GetGPUUsageValue()     // float64
		memUsage := GetMemoryUsageValue()  // float64
		netUsage := GetNetworkUsageValue() // float64
		diskUsage := GetDiskUsageValue()   // float64

		// –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		var output strings.Builder
		output.WriteString("üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		if AlarmThresholds.CPUTemp > 0 && cpuTemp > AlarmThresholds.CPUTemp {
			output.WriteString(fmt.Sprintf("üå°Ô∏è CPU: %.1f¬∞C (–ø–æ—Ä–æ–≥: %.1f¬∞C)\n", cpuTemp, AlarmThresholds.CPUTemp))
		}
		if AlarmThresholds.GPUTemp > 0 && gpuTemp > AlarmThresholds.GPUTemp {
			output.WriteString(fmt.Sprintf("üå°Ô∏è GPU: %.1f¬∞C (–ø–æ—Ä–æ–≥: %.1f¬∞C)\n", gpuTemp, AlarmThresholds.GPUTemp))
		}
		if AlarmThresholds.CPUUsage > 0 && cpuUsage > AlarmThresholds.CPUUsage {
			output.WriteString(fmt.Sprintf("‚öôÔ∏è CPU: %.1f%% (–ø–æ—Ä–æ–≥: %.1f%%)\n", cpuUsage, AlarmThresholds.CPUUsage))
		}
		if AlarmThresholds.GPUUsage > 0 && gpuUsage > AlarmThresholds.GPUUsage {
			output.WriteString(fmt.Sprintf("üéÆ GPU: %.1f%% (–ø–æ—Ä–æ–≥: %.1f%%)\n", gpuUsage, AlarmThresholds.GPUUsage))
		}
		if AlarmThresholds.MemoryUsage > 0 && memUsage > AlarmThresholds.MemoryUsage {
			output.WriteString(fmt.Sprintf("üß† –ü–∞–º—è—Ç—å: %.1f%% (–ø–æ—Ä–æ–≥: %.1f%%)\n", memUsage, AlarmThresholds.MemoryUsage))
		}
		if AlarmThresholds.NetworkUsage > 0 && netUsage > AlarmThresholds.NetworkUsage {
			output.WriteString(fmt.Sprintf("üåê –°–µ—Ç—å: %.1f –ú–ë/—Å (–ø–æ—Ä–æ–≥: %.1f –ú–ë/—Å)\n", netUsage, AlarmThresholds.NetworkUsage))
		}
		if AlarmThresholds.DiskUsage > 0 && diskUsage > AlarmThresholds.DiskUsage {
			output.WriteString(fmt.Sprintf("üíΩ –î–∏—Å–∫–∏: %.1f%% (–ø–æ—Ä–æ–≥: %.1f%%)\n", diskUsage, AlarmThresholds.DiskUsage))
		}

		// –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∏ chatID –Ω–µ —Ä–∞–≤–µ–Ω 0, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		if output.Len() > len("üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n") && chatID != 0 {
			msg := tgbotapi.NewMessage(chatID, output.String())
			_, err := bot.Send(msg)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
			} else {
				log.Println("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
			lastNotification = time.Now()
		}

		time.Sleep(10 * time.Second)
	}
}
